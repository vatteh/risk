/**
 * Makes the panel in the lower left corner of the the Risk frame. Will hold current stats and will 
 * hold the console to keep the human player up to date. Will also have the troop panel to allow the 
 * human player to visually see how many troops he has left.
 * 
 * @author Victor
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import map.Territory;

import player.Attack;
import player.Fortify;
import player.Human;
import player.Player;

import base.Game;

public class ConsolePanel extends JPanel implements Observer{

	private Game game;
	private JTextArea console;
	private JProgressBar progressBar;
	private StatsPanel statsPanel;

	/**
	 * 
	 * @param game - the current game being played.
	 */
	public ConsolePanel(Game game) {
		
		this.game = game;
		game.addObserver(this);
		this.setLayout(new FlowLayout());
		
		// look at all human players for the console to prompt when to attack of fortify
		for (Player player: game.getAllPlayers()) {
			if (player instanceof Human) {
				player.addObserver(this);
			}
		}
		
        progressBar = new JProgressBar();
        progressBar.setString("Troops left to Place");
        progressBar.setMinimum(0);
        progressBar.setValue(50);
        progressBar.setPreferredSize(new Dimension(450,50));
        progressBar.setForeground(Color.green);
  
        TitledBorder title = BorderFactory.createTitledBorder("Troops Left to Place");
        Border blackline = BorderFactory.createLineBorder(Color.LIGHT_GRAY);
        title.setTitleJustification(TitledBorder.CENTER);
        title.setBorder(blackline);
        progressBar.setBorder(title);
        progressBar.setBackground(Color.LIGHT_GRAY);
        this.add(progressBar,BorderLayout.NORTH);
        
        //console.setCaretPosition(console.getText().length());
      
        statsPanel = new StatsPanel(game);
        this.add(statsPanel);
        
        console = new JTextArea("Welcome to the game of RISK! \n",5,40);
		console.setEditable(false);
		
		TitledBorder consoleTitle = BorderFactory.createTitledBorder(" Game Console ");
	    consoleTitle.setTitleJustification(TitledBorder.CENTER);
	    consoleTitle.setBorder(BorderFactory.createLineBorder(Color.WHITE));
	    console.setBorder(consoleTitle);
	   
		this.setBackground(Color.LIGHT_GRAY);
		this.add(new JScrollPane(console),BorderLayout.SOUTH);
        this.setPreferredSize(new Dimension(500,300));
        this.setMaximumSize(getPreferredSize());
        
	}
	
	public void update(Observable arg0, Object arg1) {
		if (arg1 == ConsoleUpdate.NEW_STAGE) {
			console.append("Current Stage: " + game.getCurrentStage().toString() + ".\n");
		}
		else if (arg1 == ConsoleUpdate.NEW_PLAYER) {
			console.append("Player's Turn: " + game.getCurrentPlayer().getName() + ".\n");
		}
		else if (arg1 == ConsoleUpdate.GOOD_TRADE) {
			console.append(game.getCurrentPlayer().getName() + " has successfully traded a matching set for " + game.getTurnInValue() + " extra armies.\n");
		}
		else if (arg1 == ConsoleUpdate.BAD_TRADE) {
			console.append("Not a matching set! \n");
		}
		else if (arg1 == ConsoleUpdate.TERRITORY_BONUS) {
			console.append("Plus two added your territory for trading a card with a territory you own. \n");
		}
		else if (arg1 == ConsoleUpdate.TROOPS_THIS_TURN) {
			console.append(game.getCurrentPlayer().getName() + " has been given " + game.getCurrentPlayer().getTroopsToGive() + ".\n");
		}
		else if (arg1 == ConsoleUpdate.CALCULATE_ATTACK_FROM) {
			console.append("Please Choose the Territory you want to Attack from. \n");
		}
		else if (arg1 == ConsoleUpdate.CALCULATE_ATTACK_TO) {
			console.append("Please Choose the Territory you want to Attack. \n");
		}
		else if (arg1 == ConsoleUpdate.CALCULATE_FORTIFY_FROM) {
			console.append("Please Choose the Territory you want to Fortify from. \n");
		}
		else if (arg1 == ConsoleUpdate.CALCULATE_FORTIFY_TO) {
			console.append("Please Choose the Territory you want to Fortify to. \n");
		}
		else if (arg1 instanceof Territory) {
			console.append(((Territory) arg1).getName() + "\n");
		}
		else if (arg1 instanceof Attack) {
			console.append(((Attack) arg1).getAttackingTerritory().getName() + " is attacking " + ((Attack) arg1).getDefendingTerritory().getName() + ".\n");
		}
		else if (arg1 instanceof Fortify) {
			console.append(((Fortify)arg1).getAmount() + " troops from " + ((Fortify)arg1).getFrom().getName() + " to " + ((Fortify)arg1).getTo().getName() + ".\n");
		}
		else if (arg1 == ConsoleUpdate.PROGRESS_START) {
			progressBar.setMaximum(game.getCurrentPlayer().getTroopsToGive());
			progressBar.setValue(game.getCurrentPlayer().getTroopsToGive());
		}
		else if (arg1 == ConsoleUpdate.PROGRESS_START) {
			progressBar.setValue(game.getCurrentPlayer().getTroopsToGive());
		}
		else if (arg1 == ConsoleUpdate.UPDATE_STATS) {
			statsPanel.repaint();
		}

		statsPanel.repaint();
	}

}
