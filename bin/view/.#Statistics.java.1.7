package view;

import java.io.Serializable;
import java.util.Observable;
import java.util.Observer;

import player.Human;
import player.Player;

import map.Map;
import map.Territory;

import base.Game;
import base.Stage;

public class Statistics extends Observable implements Observer , Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6765561195972235723L;
	private Game game;
	private Map map;
	
	public static Player winner;
	public static String totalTimePlayed;
	public static int roundsPlayed;
	public static int totalTroopsOwned;
	public static int totalTroopsEverLived;
	public static int totalTroopsEverDied;
	public static int totalAttacks;
	public static int totalBattlesWon;
	public static int totalBattlesLost;
	public static String mostCurrentFortifiedTerritory;
	public static String leastCurrentForitifiedTerrritory;
	public static String mostFortifiedTerritoryAllTime;
	public static String leastFortifiedTerritoryAllTime;
	public static String mostAttackedTerritory;
	public static String mostDefendedTerritory;
	public static String territoriesOwnedByPlayer;
	public static String continentsOwnedByPlayer;
	public static String numTerritoriesOwnedByPlayer;
	public static String numContinentsOwnedByPlayer;
	
	public Statistics(Game game) {
		
		Thread timeThread = new Thread(new Runnable() {
			public void run() {
				while(true) {
					update(null,null);
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		});
		timeThread.start();
		
		this.game = game;
		map = this.game.getMap();
		game.addObserver(this);
		totalTroopsEverLived = 0;
		for (Territory t : Map.getTerritories()) {
			totalTroopsEverLived += t.getTroopsOnTerritory();
		}
		totalAttacks = 0;
		totalBattlesWon = 0;
		totalBattlesLost = 0;
		totalTroopsEverLived = 0;
		totalTroopsEverDied = 0;
		this.update(null, null);
	}

	public void update(Observable o, Object arg) {
		double elapsedTimeInSeconds = (System.currentTimeMillis() - Game.startTime) / 1000;
		totalTimePlayed = ((int)elapsedTimeInSeconds/3600)+" hrs "+((int)elapsedTimeInSeconds / 60)+" mins "+((int)elapsedTimeInSeconds%60) + " secs";
		roundsPlayed = game.getRound();
		
		totalTroopsOwned = 0;
		for (Territory t : map.getFriendlyTerritories(game.getAllPlayers().get(0))) {
			totalTroopsOwned += t.getTroopsOnTerritory();
		}
		if (arg == StatisticsUpdate.ATTACKING && game.getCurrentPlayer() instanceof Human)
			totalAttacks++;
		if (arg == StatisticsUpdate.BATTLE_WON && game.getCurrentPlayer() instanceof Human)
			totalBattlesWon++;
		if (arg == StatisticsUpdate.BATTLE_LOST && game.getCurrentPlayer() instanceof Human)
			totalBattlesLost--;
		if (arg == StatisticsUpdate.TERRITORY_ATTACKED){
			mostAttackedTerritory = map.getMostAttackedTerritory();
			mostDefendedTerritory = map.getMostDefendedTerritory();
		}
		if (arg == StatisticsUpdate.TROOP_BORN) {
			totalTroopsEverLived++;
		}
		if (arg == StatisticsUpdate.TROOP_DEADED) {
			totalTroopsEverDied++;
		}
		mostCurrentFortifiedTerritory = map.getCurrentMostFortified();
		leastCurrentForitifiedTerrritory = map.getCurrentLeastFortified();
		mostFortifiedTerritoryAllTime = map.getMostFortifiedTAllTime();
		leastFortifiedTerritoryAllTime = map.getLeastFortifiedTAllTime();
		
		if (game.getCurrentPlayer() instanceof Human) {
			territoriesOwnedByPlayer = map.getTerritoryOwnedText(game.getCurrentPlayer());
		}
		if (game.getCurrentPlayer() instanceof Human) {
			numTerritoriesOwnedByPlayer = "" + map.getFriendlyTerritories(game.getCurrentPlayer()).size();
		}
		if (game.getCurrentPlayer() instanceof Human) {
			continentsOwnedByPlayer = map.getContinentsOwnedText(game.getCurrentPlayer());
		}
		if (game.getCurrentPlayer() instanceof Human) {
			numContinentsOwnedByPlayer = "" + map.getConqueredContinents(game.getCurrentPlayer()).size();
		}
		
		
		this.setChanged();
		this.notifyObservers();
	}

}
